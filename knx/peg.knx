($sequence
    ($define! peg/matches? ($lambda (peg text)
        ($letrec ((helper ($lambda (peg text_chars)
            ($cond
                ((atom? peg)                        ($let ((remaining-chars (chars peg)))
                                                        ($if (=? #0 (len remaining-chars))
                                                            (list #true text_chars)
                                                            ($if (=? (first remaining-chars) (first text_chars))
                                                                (helper (join (rest remaining-chars)) (rest text_chars))
                                                                (list #false #inert)))))
                ((=? #set (first peg))              ($if (in? (first text_chars) (chars (second peg)))
                                                        (list #true (rest text_chars))
                                                        (list #false #inert)))
                ((=? #sequence (first peg))         ($let ((rest-of-pegs (rest peg)))
                                                        ($if (=? #0 (len rest-of-pegs))
                                                            (list #true text_chars)  
                                                            ($let (( (is-first-valid remaining-chars) (helper (first rest-of-pegs) text_chars ) ))  
                                                                ($match is-first-valid
                                                                    (#error-bad-peg     (list #error-bad-peg #inert))
                                                                    (#true              (helper (withHead #sequence (rest rest-of-pegs)) remaining-chars))
                                                                    (#false             (list #false #inert)))))))
                ((=? #any (first peg))              ($let (( (is-valid remaining-chars) (helper (second peg) text_chars ) ))  
                                                        ($match is-valid
                                                            (#error-bad-peg         (list #error-bad-peg #inert))
                                                            (#true                  (helper peg remaining-chars))
                                                            (#false                 (list #true text_chars)))))
                ((=? #some (first peg))              ($let (( (is-valid remaining-chars) (helper (second peg) text_chars ) ))  
                                                        ($match is-valid
                                                            (#error-bad-peg         (list #error-bad-peg #inert))
                                                            (#true                  (helper (list #any (second peg)) remaining-chars))
                                                            (#false                 (list #false #inert)))))
                (#true                              (list #error-bad-peg #inert))))))
            (first (helper peg (chars text))))))
    (list
        (peg/matches? ($quote hola) #holabuenas)
        (peg/matches? ($quote hola) #hobuenas)
        (peg/matches? ($quote (set 1234)) #2)
        (peg/matches? ($quote (set 1234)) #6)
        (peg/matches? ($quote (sequence na no)) #nano)
        (peg/matches? ($quote (sequence na no)) #nana)
        (peg/matches? ($quote (sequence (any na) no)) #nanano)
        (peg/matches? ($quote (sequence (any na) na no)) #nano)
        (peg/matches? ($quote (sequence (some na) no)) #nanano)
        (peg/matches? ($quote (sequence (some na) no)) #nonano)
    ))
